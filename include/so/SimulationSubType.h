/* libsoc - Library to handle standardised output files
 * Copyright (C) 2015 Rikard Nordgren
 * 
 * This file was autogenerated and should not be edited
 * 
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 * 
 * his library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */
#ifndef _SO_SIMULATIONSUBTYPE_H
#define _SO_SIMULATIONSUBTYPE_H

#include <so/Table.h>

/** \struct so_SimulationSubType
	 \brief A structure representing an SimulationSubType element
*/
typedef struct so_SimulationSubType so_SimulationSubType;

/** \memberof so_SimulationSubType
 * Create a new empty so_SimulationSubType structure.
 * \return A pointer to the newly created struct or NULL if memory allocation failed
 * \sa so_SimulationSubType_copy, so_SimulationSubType_free
 */
so_SimulationSubType *so_SimulationSubType_new();
/** \memberof so_SimulationSubType
 * Create a copy of a so_SimulationSubType structure.
 * \return A pointer to the newly created struct or NULL if memory allocation failed
 * \sa so_SimulationSubType_new
 */
so_SimulationSubType *so_SimulationSubType_copy(so_SimulationSubType *self);
/** \memberof so_SimulationSubType
 * Free all memory associated with a so_SimulationSubType structure and its children.
 * \param self - a pointer to the structure to free
 * \sa so_SimulationSubType_new
 */
void so_SimulationSubType_free(so_SimulationSubType *self);
void so_SimulationSubType_ref(so_SimulationSubType *self);
void so_SimulationSubType_unref(so_SimulationSubType *self);
so_Table *so_SimulationSubType_get_base(so_SimulationSubType *self);
int so_SimulationSubType_set_base(so_SimulationSubType *self, so_Table *value);
/** \memberof so_SimulationSubType
 * Get the value of the name attribute
 * \param self - pointer to a so_SimulationSubType
 * \return A pointer to the attribute value
 * \sa so_SimulationSubType_set_name
 */
char *so_SimulationSubType_get_name(so_SimulationSubType *self);
/** \memberof so_SimulationSubType
 * Set the value of the name attribute
 * \param self - pointer to a so_SimulationSubType
 * \param value - A pointer to the attribute value
 * \return 0 for success
 * \sa so_SimulationSubType_get_name
 */
int so_SimulationSubType_set_name(so_SimulationSubType *self, char *value);
/** \memberof so_SimulationSubType
 * Get the value of the extFileNo attribute
 * \param self - pointer to a so_SimulationSubType
 * \return A pointer to the attribute value
 * \sa so_SimulationSubType_set_extFileNo
 */
int *so_SimulationSubType_get_extFileNo(so_SimulationSubType *self);
/** \memberof so_SimulationSubType
 * Set the value of the extFileNo attribute
 * \param self - pointer to a so_SimulationSubType
 * \param value - A pointer to the attribute value
 * \sa so_SimulationSubType_get_extFileNo
 */
void so_SimulationSubType_set_extFileNo(so_SimulationSubType *self, int *value);

#endif
